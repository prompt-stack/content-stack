COMPUTER NETWORKS - CHAPTER 7: TRANSPORT LAYER
Study Notes for Final Exam

=== Overview ===
The transport layer (Layer 4 in OSI model) provides end-to-end communication services for applications. It's responsible for reliable data transfer between processes running on different hosts.

Key responsibilities:
- Process-to-process delivery (using port numbers)
- Error detection and recovery
- Flow control
- Congestion control

=== TCP vs UDP ===

TCP (Transmission Control Protocol):
- Connection-oriented (3-way handshake)
- Reliable, ordered delivery
- Flow control (sliding window)
- Congestion control (slow start, congestion avoidance)
- Higher overhead
- Use cases: HTTP, FTP, SMTP, SSH

UDP (User Datagram Protocol):
- Connectionless
- Unreliable, no ordering guarantees
- No flow or congestion control
- Lower overhead, faster
- Use cases: DNS, DHCP, streaming media, online gaming

REMEMBER: "TCP is like certified mail, UDP is like a postcard"

=== TCP Three-Way Handshake ===
1. SYN: Client sends SYN with initial sequence number
2. SYN-ACK: Server responds with SYN-ACK, its own sequence number
3. ACK: Client acknowledges server's SYN

Important: Each side chooses its own initial sequence number (ISN) randomly for security

=== TCP Sliding Window ===
- Window size = min(receiver window, congestion window)
- Receiver advertises available buffer space
- Allows multiple segments in flight
- Improves throughput over stop-and-wait

Example problem:
If RTT = 100ms, bandwidth = 10 Mbps, what window size for full utilization?
Bandwidth-delay product = 10 Mbps × 0.1s = 1 Mb = 125 KB

=== TCP Congestion Control ===

Phases:
1. Slow Start: cwnd starts at 1 MSS, doubles each RTT (exponential growth)
2. Congestion Avoidance: cwnd increases by 1 MSS per RTT (linear growth)
3. Fast Retransmit: After 3 duplicate ACKs
4. Fast Recovery: Reduces cwnd to half, then linear increase

Key variables:
- cwnd: Congestion window
- ssthresh: Slow start threshold
- MSS: Maximum segment size

AIMD (Additive Increase Multiplicative Decrease):
- No loss: cwnd = cwnd + 1
- Loss detected: cwnd = cwnd / 2

=== Port Numbers ===
- Well-known ports: 0-1023 (HTTP=80, HTTPS=443, SSH=22, FTP=21)
- Registered ports: 1024-49151
- Dynamic/private ports: 49152-65535

Socket = IP address + Port number

=== Error Detection ===
Checksum calculation:
1. Treat data as 16-bit integers
2. Add all integers (with wraparound)
3. Take 1's complement of sum
4. Receiver adds all including checksum, result should be all 1's

=== Important Formulas ===
- Throughput ≤ Window Size / RTT
- Utilization = (Window Size) / (Bandwidth × RTT)
- Timeout = EstimatedRTT + 4 × DevRTT
- EstimatedRTT = (1-α) × EstimatedRTT + α × SampleRTT (typically α = 0.125)

=== Practice Problems ===

Q1: Why does TCP use sequence numbers based on bytes rather than segments?
A: Allows byte-stream abstraction, handles variable-size segments, enables selective retransmission

Q2: Calculate checksum for data: 0x1234, 0x5678
A: Sum = 0x1234 + 0x5678 = 0x68AC, Checksum = ~0x68AC = 0x9753

Q3: If a TCP connection has ssthresh=32KB and experiences timeout at cwnd=64KB, what's the new cwnd and ssthresh?
A: New ssthresh = 64KB/2 = 32KB, New cwnd = 1 MSS (slow start)

=== Key Concepts to Review ===
✓ Multiplexing/demultiplexing
✓ Reliable data transfer principles (rdt protocols)
✓ Pipelined protocols (Go-Back-N vs Selective Repeat)
✓ TCP timer management
✓ TCP connection termination (4-way handshake)
✓ Fairness in congestion control
✓ Network-assisted vs end-to-end congestion control

=== Professor's Hints ===
- "I always include one question on TCP state diagram"
- "Know how to calculate throughput given network parameters"
- "Understand why we need both flow control AND congestion control"
- "Be able to draw timing diagrams for different scenarios"

FINAL EXAM: Thursday, 2pm, Room 301
Allowed: One page of notes (both sides)
Focus areas: 40% TCP, 20% UDP, 20% congestion control, 20% problem solving